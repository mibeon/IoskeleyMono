name: Build and Release Font

on:
  push:
    branches: ["main"]
    paths:
      - "private-build-plans.toml"
      - ".github/workflows/**"
  workflow_dispatch:

# wichtig: Schreibrecht für Releases/Tags
permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Checkout Iosevka source
        uses: actions/checkout@v4
        with:
          repository: be5invis/Iosevka
          path: iosevka-src
          fetch-depth: 1

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ttfautohint python3 zip

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Copy custom build plan
        run: cp private-build-plans.toml iosevka-src/

      - name: Install dependencies and build
        working-directory: iosevka-src
        run: |
          npm install
          # baue NUR deinen Plan
          npm run build -- contents::IoskeleyMono

      - name: Verify build output
        run: |
          test -d "iosevka-src/dist/IoskeleyMono" || (echo "Output missing" && exit 1)
          ls -la iosevka-src/dist/IoskeleyMono

      # Zips robust erzeugen (nur vorhandene Ordner packen)
      - name: Package font files
        run: |
          set -e
          cd iosevka-src/dist/IoskeleyMono
          mkdir -p ../../../out

          pack() {
            local out="$1"; shift
            local any=0
            for d in "$@"; do
              if [ -d "$d" ]; then
                any=1
              fi
            done
            if [ "$any" = 1 ]; then
              zip -r "../../../out/$out" "$@" >/dev/null
            else
              echo "Skip $out (no matching dirs: $*)"
            fi
          }

          pack IoskeleyMono-TTF-Hinted.zip TTF
          pack IoskeleyMono-TTF-Unhinted.zip TTF-Unhinted
          pack IoskeleyMono-Web.zip WOFF2 WOFF2-Unhinted

          cd ../../../out
          ls -la

      # >>> Artefakte IMMER hochladen (damit du sie im Run siehst)
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: fonts-${{ github.run_number }}
          path: iosevka-src/out/*.zip
          if-no-files-found: warn

      # Version / Tag für Release
      - name: Set Release Version
        id: vars
        run: echo "tag=$(date +'%Y.%m.%d')-${{ github.run_number }}" >> $GITHUB_OUTPUT

      # Optional: Release mit Assets erstellen
      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.vars.outputs.tag }}
          name: "Release ${{ steps.vars.outputs.tag }}"
          body: |
            Automated build from
